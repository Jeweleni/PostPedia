generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        String   @id
  userId    String?
  postId    String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
}

model Follows {
  followerId                     String
  followingId                    String
  User_Follows_followerIdToUser  User   @relation("Follows_followerIdToUser", fields: [followerId], references: [id])
  User_Follows_followingIdToUser User   @relation("Follows_followingIdToUser", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Image {
  id     String  @id
  url    String
  postId String?
  Post   Post?   @relation(fields: [postId], references: [id])
}

model Like {
  id     String  @id
  userId String?
  postId String?
  Post   Post?   @relation(fields: [postId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
}

model Post {
  id          String    @id
  userId      String?
  topic       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  slug        String
  title       String
  views       Int       @default(0)
  Comment     Comment[]
  Image       Image[]
  Like        Like[]
  User        User?     @relation(fields: [userId], references: [id])
  Tag         Tag[]

  @@index([userId], map: "userId")
}

model Setting {
  id        String    @id
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  language  Language?
  darkMode  Boolean?  @default(false)
  User      User?     @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String   @id
  userId    String?
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  plan      Plan     @default(BASIC)
  User      User?    @relation(fields: [userId], references: [id])
}

model Tag {
  id     String  @id
  name   String  @unique
  postId String?
  Post   Post?   @relation(fields: [postId], references: [id])
}

model User {
  id                                String         @id
  firstName                         String
  lastName                          String
  email                             String         @unique
  password                          String?
  createdAt                         DateTime       @default(now())
  updatedAt                         DateTime
  emailVerified                     DateTime?
  profileImage                      String?
  slug                              String
  userName                          String         @unique
  Comment                           Comment[]
  Follows_Follows_followerIdToUser  Follows[]      @relation("Follows_followerIdToUser")
  Follows_Follows_followingIdToUser Follows[]      @relation("Follows_followingIdToUser")
  Like                              Like[]
  Post                              Post[]
  Setting                           Setting[]
  Subscription                      Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Language {
  ENGLISH
  FRENCH
  SPANISH
  GERMAN
  ITALIAN
  PORTUGUESE
  RUSSIAN
  JAPANESE
  KOREAN
  CHINESE
  ARABIC
  HINDI
  BENGALI
  PUNJABI
  TELUGU
  MARATHI
  TAMIL
  URDU
  GUJARATI
  KANNADA
  MALAYALAM
  OTHER
}

enum Plan {
  BASIC
  PREMIUM
  ENTERPRISE
}
